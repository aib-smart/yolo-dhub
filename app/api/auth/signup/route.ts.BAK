// app/api/auth/signup/route.ts
import { NextResponse } from 'next/server';
import admin from 'firebase-admin';

// Initialize Firebase Admin only once
if (!admin.apps.length) {
  try {
    const serviceAccount = process.env.FIREBASE_SERVICE_ACCOUNT_KEY
      ? JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT_KEY)
      : undefined;

    if (!serviceAccount) {
      throw new Error('FIREBASE_SERVICE_ACCOUNT_KEY is not configured');
    }

    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
      databaseURL: process.env.FIREBASE_DATABASE_URL, // Optional if not using Realtime Database
    });
  } catch (error) {
    console.error('Firebase initialization error:', error);
    throw new Error('Failed to initialize Firebase Admin');
  }
}

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const { firstName, lastName, email, phone, password, idType, idNumber, region } = body;

    // Validate required fields
    if (!firstName || !lastName || !email || !phone || !password || !idType || !idNumber || !region) {
      return NextResponse.json(
        { message: 'Missing required fields' },
        { status: 400 }
      );
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return NextResponse.json(
        { message: 'Invalid email format' },
        { status: 400 }
      );
    }

    // Validate phone number format (E.164 format required by Firebase)
    if (!phone.startsWith('+')) {
      return NextResponse.json(
        { message: 'Phone number must be in E.164 format (e.g., +1234567890)' },
        { status: 400 }
      );
    }

    // Create user in Firebase Authentication
    const userRecord = await admin.auth().createUser({
      email,
      password,
      displayName: `${firstName} ${lastName}`,
      phoneNumber: phone,
    });

    // Save additional user data in Firestore
    const db = admin.firestore();
    const userRef = db.collection('agents').doc(userRecord.uid); // Use Firestore collection
    await userRef.set({
      firstName,
      lastName,
      email,
      phone,
      idType,
      idNumber,
      region,
      role: 'agent', // Default role
      createdAt: admin.firestore.FieldValue.serverTimestamp(), // Firestore timestamp
      lastUpdated: admin.firestore.FieldValue.serverTimestamp(), // Firestore timestamp
      isActive: true,
    });

    return NextResponse.json(
      { message: 'User created successfully', userId: userRecord.uid },
      { status: 201 }
    );

  } catch (error: any) {
    console.error('Error creating user:', error);

    // Handle specific Firebase errors
    if (error.code === 'auth/email-already-exists') {
      return NextResponse.json(
        { message: 'Email already in use' },
        { status: 400 }
      );
    }
    if (error.code === 'auth/invalid-phone-number') {
      return NextResponse.json(
        { message: 'Invalid phone number format' },
        { status: 400 }
      );
    }
    if (error.code === 'auth/invalid-password') {
      return NextResponse.json(
        { message: 'Password must be at least 6 characters' },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { message: error.message || 'Internal Server Error', code: error.code },
      { status: 500 }
    );
  }
}